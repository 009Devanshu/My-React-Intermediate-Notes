Now we will work with our game-hub application. (game-hum-mypractice)

**************************************************Exercise: Fetching Genres***********************************

npm i @tanstack/react-query@4.28
npm i @tanstack/react-query-devtools@4.28

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

---------------
In main.tsx
---------------
..
..
import {QueryClient,QueryClientProvider} from 
import {ReactQueryDevtools} from '@tanstack/react-query-devtools'

---------------
main.tsx
---------------
import React from "react";
import ReactDOM from "react-dom/client";
import { ChakraProvider, ColorModeScript } from "@chakra-ui/react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import App from "./App";
import "./index.css";
import theme from "./theme";

const queryClient = new QueryClient();

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <ChakraProvider theme={theme}>
      <ColorModeScript initialColorMode={theme.config.initialColorMode} />
      <QueryClientProvider client={queryClient}>
        <App />
        <ReactQueryDevtools />
      </QueryClientProvider>
    </ChakraProvider>
  </React.StrictMode>
);

----------------
useGenres.ts
----------------
import { useQuery } from "@tanstack/react-query";
import genres from "../data/genres";
import apiClient from "../services/api-client";
import { FetchResponse } from "./useData";

export interface Genre{
    id:number;
    name:string;
    image_background:string
}



const useGenres = ()=> useQuery({
  queryKey:['genres'],
  queryFn:()=> apiClient.get<FetchResponse<Genre>>('/genres').then(res=>res.data),
  staleTime:24*60*60*1000,   //24h
  initialData:{count:genres.length,results:genres}
})

export default useGenres;

----------------
GenreList.tsx
----------------
import {
  HStack,
  Image,
  List,
  ListItem,
  Spinner,
  Button,
  Heading,
} from "@chakra-ui/react";
import useGenres, { Genre } from "../hooks/useGenres";
import getCroppedImageUrl from "../services/image-url";

interface Props {
  onSelectGenre: (genre: Genre) => void;
}

const GenreList = ({ onSelectGenre }: Props) => {
  const { data, isLoading, error } = useGenres();
  if (error) return null;
  if (isLoading) return <Spinner />;
  return (
    <>
      <Heading fontSize="2xl" marginBottom={3}>
        Genres
      </Heading>
      <List>
        {data?.results.map((genre) => (
          <ListItem key={genre.id} paddingY="5px">
            <HStack>
              <Image
                boxSize="32px"
                borderRadius={8}
                objectFit="cover"
                src={getCroppedImageUrl(genre.image_background)}
              />
              <Button
                whiteSpace="normal"
                textAlign="left"
                onClick={() => onSelectGenre(genre)}
                fontSize="lg"
                variant="link"
              >
                {genre.name}
              </Button>
            </HStack>
          </ListItem>
        ))}
      </List>
    </>
  );
};

export default GenreList;

-----------------
useData.ts
-----------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { Axios, AxiosRequestConfig, CanceledError } from "axios";



export interface FetchResponse<T> {
    count: number;
    results: T[];
  }

const useData = <T>(endpoint:string,requestConfig?:AxiosRequestConfig,deps?:any[])=>{
    const [data, setData] = useState<T[]>([]);
  const [error, setError] = useState("");
  const [isLoading,setLoading] = useState(false);
  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    apiClient
      .get<FetchResponse<T>>(endpoint,{signal:controller.signal,...requestConfig})
      .then((res) => {
        setData(res.data.results);
        setLoading(false)
      })
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
          setLoading(false)
        });
      return ()=>controller.abort();
  },deps?[...deps]:[]);
  return {data,error,isLoading};
}

export default useData;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


************************************************Exercise:Fetching Platforms***************************


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

------------------
usePlatforms.ts
------------------
import { useQuery } from "@tanstack/react-query";
import useData, { FetchResponse } from "./useData";
import apiClient from "../services/api-client";


interface Platform{
    id:number;
    name:string;
    slug:string
}

const usePlatforms = ()=>useQuery({
    queryKey:['platforms'],
    queryFn:()=>apiClient.get<FetchResponse<Platform>>('/platforms/lists/parents').then(res=>res.data),
    //staleTime:24*60*60*1000,    //24h
    //initialData:{count:platforms.length,results:platforms}
    
})

export default usePlatforms;

-----------------------
PlatformSelector.tsx
-----------------------
import usePlatforms from "../hooks/usePlatforms";
import { Button, Menu, MenuButton, MenuItem, MenuList } from "@chakra-ui/react";
import { BsChevronDown } from "react-icons/bs";
import { Platform } from "../hooks/useGames";

interface Props {
  selectedPlatform: Platform | null;
  onSelectPlatform: (platform: Platform) => void;
}

const PlatformSelector = ({ selectedPlatform, onSelectPlatform }: Props) => {
  const { data, error } = usePlatforms();
  if (error) return null;
  return (
    <Menu>
      <MenuButton as={Button} rightIcon={<BsChevronDown />}>
        {selectedPlatform?.name || "Platforms"}
      </MenuButton>
      <MenuList>
        {data?.results.map((platform) => (
          <MenuItem
            onClick={() => onSelectPlatform(platform)}
            key={platform.id}
          >
            {platform.name}
          </MenuItem>
        ))}
      </MenuList>
    </Menu>
  );
};

export default PlatformSelector;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

**************************************************Exercise:Fetching Games*****************************

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

----------------
useGames.ts
----------------
import { useQuery } from "@tanstack/react-query";
import { GameQuery } from "../App";
import apiClient from "../services/api-client";
import { FetchResponse } from "../services/api-client";

export interface Platform{
  id:number;
  name:string;
  slug:string;
}

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
    rating_top:number;
    
  }
  
 

const useGames = (gameQuery:GameQuery)=>
useQuery<FetchResponse<Game>,Error>({
  queryKey:['games',gameQuery],
  queryFn:()=>apiClient.get<FetchResponse<Game>>('/games',{
    params:{
      genres:gameQuery.genre?.id,
      parent_platforms:gameQuery.platform?.id,
      ordering:gameQuery.sortOrder,
      search:gameQuery.searchText
  },
  })
  .then(res=>res.data)
})

export default useGames;

----------------
api-client.ts
----------------
import axios from "axios";

export interface FetchResponse<T> {
    count: number;
    results: T[];
  }

export default axios.create({
    baseURL:'https://api.rawg.io/api',
    params:{
        key:'af7f2e4472724d6c974618270c46fab9'
    }
})

-----------------
GameGrid.tsx
-----------------
import useGames, { Platform } from "../hooks/useGames";
import { SimpleGrid, Text } from "@chakra-ui/react";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";
import GameCardContainer from "./GameCardContainer";
import { Genre } from "../hooks/useGenres";
import { GameQuery } from "../App";

interface Props {
  gameQuery: GameQuery;
}

const GameGrid = ({ gameQuery }: Props) => {
  const { data, error, isLoading } = useGames(gameQuery);
  const Skeletons = [1, 2, 3, 4, 5, 6];

  if (error) return <Text>{error.message}</Text>;
  return (
    <SimpleGrid
      columns={{ sm: 1, md: 2, lg: 3, xl: 4 }}
      padding="10px"
      spacing={6}
    >
      {isLoading &&
        Skeletons.map((skeleton) => (
          <GameCardContainer key={skeleton}>
            <GameCardSkeleton />
          </GameCardContainer>
        ))}
      {data?.results.map((game) => (
        <GameCardContainer key={game.id}>
          <GameCard game={game} />
        </GameCardContainer>
      ))}
    </SimpleGrid>
  );
};
export default GameGrid;


And delete useData.ts 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


************************************************Exercise:Removing Duplicate Interfaces*****************************


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

------------------
useGames.ts
------------------
import { useQuery } from "@tanstack/react-query";
import { GameQuery } from "../App";
import apiClient from "../services/api-client";
import { FetchResponse } from "../services/api-client";
import { Platform } from "./usePlatforms";


export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
    rating_top:number;
    
  }
  
 

const useGames = (gameQuery:GameQuery)=>
useQuery<FetchResponse<Game>,Error>({
  queryKey:['games',gameQuery],
  queryFn:()=>apiClient.get<FetchResponse<Game>>('/games',{
    params:{
      genres:gameQuery.genre?.id,
      parent_platforms:gameQuery.platform?.id,
      ordering:gameQuery.sortOrder,
      search:gameQuery.searchText
  },
  })
  .then(res=>res.data)
})

export default useGames;

-----------------
App.tsx
-----------------
import {
  Button,
  ButtonGroup,
  Grid,
  GridItem,
  Flex,
  Show,
  Box,
  Heading,
} from "@chakra-ui/react";
import NavBar from "./components/NavBar";

import GenreList from "./components/GenreList";
import GameGrid from "./components/GameGrid";
import { useState } from "react";
import { Genre } from "./hooks/useGenres";
import PlatformSelector from "./components/PlatformSelector";
import { Platform } from "./hooks/usePlatforms";
import { SortSelector } from "./components/SortSelector";

export interface GameQuery {
  genre: Genre | null;
  platform: Platform | null;
  sortOrder: string;
  searchText: string;
}

function App() {
  const [gameQuery, setGameQuery] = useState<GameQuery>({} as GameQuery);
  return (
    <Grid
      templateAreas={{ base: `"nav" "main"`, lg: `"nav nav" "aside main"` }}
      templateColumns={{
        base: "1fr",
        lg: "200px 1fr",
      }}
    >
      <GridItem area="nav">
        <NavBar
          onSearch={(searchText) => setGameQuery({ ...gameQuery, searchText })}
        />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside" paddingX={5}>
          <GenreList
            onSelectGenre={(genre) => setGameQuery({ ...gameQuery, genre })}
          />
        </GridItem>
      </Show>

      <GridItem area="main">
        <Heading marginBottom={5} marginLeft={2} marginTop={7}>
          Games
        </Heading>
        <Flex paddingLeft={2} marginBottom={5}>
          <Box marginRight={5}>
            <PlatformSelector
              selectedPlatform={gameQuery.platform}
              onSelectPlatform={(platform) =>
                setGameQuery({ ...gameQuery, platform })
              }
            />
          </Box>
          <SortSelector
            sortOrder={gameQuery.sortOrder}
            onSelectSortOrder={(sortOrder) =>
              setGameQuery({ ...gameQuery, sortOrder })
            }
          />
        </Flex>

        <GameGrid gameQuery={gameQuery} />
      </GridItem>
    </Grid>
  );
}

export default App;

------------------
usePlatforms.ts
------------------
import { useQuery } from "@tanstack/react-query";
import { FetchResponse } from "../services/api-client";
import apiClient from "../services/api-client";


export interface Platform{
    id:number;
    name:string;
    slug:string
}

const usePlatforms = ()=>useQuery({
    queryKey:['platforms'],
    queryFn:()=>apiClient.get<FetchResponse<Platform>>('/platforms/lists/parents').then(res=>res.data),
    //staleTime:24*60*60*1000,    //24h
    //initialData:{count:platforms.length,results:platforms}
    
})

export default usePlatforms;

-------------------
GameGrid.tsx
-------------------
import { SimpleGrid, Text } from "@chakra-ui/react";
import { GameQuery } from "../App";
import useGames from "../hooks/useGames";
import GameCard from "./GameCard";
import GameCardContainer from "./GameCardContainer";
import GameCardSkeleton from "./GameCardSkeleton";

interface Props {
  gameQuery: GameQuery;
}

const GameGrid = ({ gameQuery }: Props) => {
  const { data, error, isLoading } = useGames(gameQuery);
  const Skeletons = [1, 2, 3, 4, 5, 6];

  if (error) return <Text>{error.message}</Text>;
  return (
    <SimpleGrid
      columns={{ sm: 1, md: 2, lg: 3, xl: 4 }}
      padding="10px"
      spacing={6}
    >
      {isLoading &&
        Skeletons.map((skeleton) => (
          <GameCardContainer key={skeleton}>
            <GameCardSkeleton />
          </GameCardContainer>
        ))}
      {data?.results.map((game) => (
        <GameCardContainer key={game.id}>
          <GameCard game={game} />
        </GameCardContainer>
      ))}
    </SimpleGrid>
  );
};
export default GameGrid;

-----------------------
PlatformIconList.tsx
-----------------------
import {
  FaWindows,
  FaPlaystation,
  FaXbox,
  FaApple,
  FaLinux,
  FaAndroid,
} from "react-icons/fa";
import { MdPhoneIphone } from "react-icons/md";
import { SiNintendo } from "react-icons/si";
import { BsGlobe } from "react-icons/bs";
import { Platform } from "../hooks/usePlatforms";
import { IconType } from "react-icons";
import { HStack, Icon } from "@chakra-ui/react";

interface Props {
  platforms: Platform[];
}

const PlatformIconList = ({ platforms }: Props) => {
  const iconMap: { [key: string]: IconType } = {
    pc: FaWindows,
    playstation: FaPlaystation,
    xbox: FaXbox,
    nintendo: SiNintendo,
    mac: FaApple,
    linux: FaLinux,
    android: FaAndroid,
    ios: MdPhoneIphone,
    web: BsGlobe,
  };
  return (
    <HStack marginY={1}>
      {platforms.map((platform) => (
        <Icon key={platform.id} as={iconMap[platform.slug]} color="gray.500" />
      ))}
    </HStack>
  );
};

export default PlatformIconList;

------------------------
PlatformSelector.tsx
------------------------
import usePlatforms, { Platform } from "../hooks/usePlatforms";
import { Button, Menu, MenuButton, MenuItem, MenuList } from "@chakra-ui/react";
import { BsChevronDown } from "react-icons/bs";

interface Props {
  selectedPlatform: Platform | null;
  onSelectPlatform: (platform: Platform) => void;
}

const PlatformSelector = ({ selectedPlatform, onSelectPlatform }: Props) => {
  const { data, error } = usePlatforms();
  if (error) return null;
  return (
    <Menu>
      <MenuButton as={Button} rightIcon={<BsChevronDown />}>
        {selectedPlatform?.name || "Platforms"}
      </MenuButton>
      <MenuList>
        {data?.results.map((platform) => (
          <MenuItem
            onClick={() => onSelectPlatform(platform)}
            key={platform.id}
          >
            {platform.name}
          </MenuItem>
        ))}
      </MenuList>
    </Menu>
  );
};

export default PlatformSelector;



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


*****************************************Exercise:Creating A Reusable API Client*********************************

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

------------------
api-client.ts
------------------
import axios, { AxiosRequestConfig } from "axios";

export interface FetchResponse<T> {
    count: number;
    results: T[];
  }

const axiosInstance = axios.create({
    baseURL:'https://api.rawg.io/api',
    params:{
        key:'af7f2e4472724d6c974618270c46fab9'
    }
})

class APIClient<T>{
    endpoint:string;
    constructor(endpoint:string){
        this.endpoint = endpoint;
    }

    getAll=(config:AxiosRequestConfig)=>{
        return axiosInstance.get<FetchResponse<T>>(this.endpoint,config)
        .then(res=>res.data);
    }
}

export default APIClient;

----------------
useGenres.ts
----------------
import { useQuery } from "@tanstack/react-query";
import genres from "../data/genres";
import APIClient from "../services/api-client";
import { FetchResponse } from "../services/api-client";

const apiClient = new APIClient<Genre>('/genres');

export interface Genre{
    id:number;
    name:string;
    image_background:string
}



const useGenres = ()=> useQuery({
  queryKey:['genres'],
  queryFn:apiClient.getAll,
  staleTime:24*60*60*1000,   //24h
  initialData:{count:genres.length,results:genres}
})

export default useGenres;

----------------
usePlatforms.ts
----------------
import { useQuery } from "@tanstack/react-query";
import APIClient,{ FetchResponse } from "../services/api-client";

const apiClient = new APIClient<Platform>('/platforms/lists/parents');

export interface Platform{
    id:number;
    name:string;
    slug:string
}

const usePlatforms = ()=>useQuery({
    queryKey:['platforms'],
    queryFn:apiClient.getAll,
    //staleTime:24*60*60*1000,    //24h
    //initialData:{count:platforms.length,results:platforms}
    
})

export default usePlatforms;

------------------
useGames.ts
------------------
import { useQuery } from "@tanstack/react-query";
import { GameQuery } from "../App";
import APIClient,{ FetchResponse } from "../services/api-client";
import { Platform } from "./usePlatforms";

const apiClient = new APIClient<Game>('/games');

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
    rating_top:number;
    
  }
  
 

const useGames = (gameQuery:GameQuery)=>
useQuery<FetchResponse<Game>,Error>({
  queryKey:['games',gameQuery],
  queryFn:()=>apiClient.getAll({
    params:{
      genres:gameQuery.genre?.id,
      parent_platforms:gameQuery.platform?.id,
      ordering:gameQuery.sortOrder,
      search:gameQuery.searchText
  },
  })
})

export default useGames;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END





































